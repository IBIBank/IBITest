@model IBITest.Models.Customer

@{
    ViewBag.Title = "FinishRegistration";
    Layout = "~/Views/Shared/_IBIBankLayout.cshtml";
}
<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>
<script src="//code.jquery.com/jquery-1.10.2.js"></script>
  <script src="//code.jquery.com/ui/1.11.4/jquery-ui.js"></script>

<script>
    function CheckUserAvailability()
    {
        //alert("I am called");
        var username = $("#UserID").val();
        //alert("You entered username " + username);
        var serviceurl = "http://localhost:52240/Service1.svc/checkUserIDavailability?username=" + username;
        jQuery.support.cors = true;
        $.ajax({
            url: serviceurl,
            cache: false,
            type: "GET",
            async: false,
            dataType: "jsonp",
            success: function (data) {
                console.log(data);
                var retval = JSON.parse(data);

                if (retval["available"] == false)
                {
                    alert("Username Not Available.")
                    $("#UserID").prop("val","")
                }
                    
                else {
                    //document.getElementById("Register").disabled = false;
                    alert("Username Available.")
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                debugger;
                alert("Service Error");
            }
        });
    }


    function UploadImage(token) {
        alert("In upload image");

        var formdata = new FormData(); //FormData object
        var fileInput = document.getElementById('file');
        //Iterating through each files selected in fileInput
        for (i = 0; i < fileInput.files.length; i++) {
            //Appending each file to FormData object
            formdata.append(fileInput.files[i].name, fileInput.files[i]);
        }
        //Creating an XMLHttpRequest and sending
        var xhr = new XMLHttpRequest();
        xhr.open('POST', '/Customer/UploadPhotoIDProof');
        xhr.send(formdata);
        xhr.onreadystatechange = function () {
            if (xhr.readyState == 4 && xhr.status == 200) {
                alert(xhr.responseText);
            }
        }
        return false;
    }


</script>

<h2>FinishRegistration</h2>

@using (Html.BeginForm("FinishRegistration", "Customer", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <fieldset>
        <legend>Customer</legend>

        @*@Html.HiddenFor(model => model.CustomerID)*@
         <div class="editor-label">
            @Html.LabelFor(model => model.CustomerID)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(m => m.CustomerID, new { @readonly="readonly" })
            @Html.ValidationMessageFor(model => model.CustomerID)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.CustomerName)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(m => m.CustomerName, new { @readonly="readonly" })
            @Html.ValidationMessageFor(model => model.CustomerName)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.DOB)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(m => m.DOB, new { @readonly="readonly", @Value = Model.DOB.ToString("MM.dd.yyyy") })
            @Html.ValidationMessageFor(model => model.DOB)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.UserID)
        </div>
        <div class="editor-field" title="UserID must be between 8-15 characters and begin with a Caps. Check availability before proceeding">
            @Html.EditorFor(model => model.UserID)
            @Html.ValidationMessageFor(model => model.UserID)
            <a onclick="CheckUserAvailability()">Check Availability</a>
        </div>
        @*<div style="float:left" >*@
            
        @*</div>*@
        
        <div class="editor-label">
            @Html.LabelFor(model => model.Password)
        </div>
        <div class="editor-field" title="Password must be between 8-15 characters and must contain at least one uppercase character, at least one digit and at least one special character.">
            @Html.EditorFor(model => model.Password)
            @Html.ValidationMessageFor(model => model.Password)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.PermanentAddress)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(m => m.PermanentAddress, new { @readonly="readonly" })
            @Html.ValidationMessageFor(model => model.PermanentAddress)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.CommunicationAddress)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.CommunicationAddress)
            @Html.ValidationMessageFor(model => model.CommunicationAddress)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.ContactNumber)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(m => m.ContactNumber, new { @readonly="readonly" })
            @Html.ValidationMessageFor(model => model.ContactNumber)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Email)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(m => m.Email, new { @readonly="readonly" })
            @Html.ValidationMessageFor(model => model.Email)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.TransactionPassword)
        </div>
        <div class="editor-field" title="Password must be between 8-15 characters and must contain at least one uppercase character, at least one digit and at least one special character. This will be required for transferring funds online.">
            @Html.EditorFor(model => model.TransactionPassword)
            @Html.ValidationMessageFor(model => model.TransactionPassword)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Token)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(m => m.Token, new { @readonly="readonly" })
            @Html.ValidationMessageFor(model => model.Token)
        </div>

      

        <label for="@(Model.PhotoIDProof)">PhotoID Proof</label>  
        <input type="file" name="Image" id="file"/> <input id="Button1" type="button" value="Upload" onclick="UploadImage( $('#Token').val() )" />
        <p>After Successful registration you will be redirected to Login page</p>
        <p>
            <input type="submit" value="Save" />
        </p>
    </fieldset>
}



@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}